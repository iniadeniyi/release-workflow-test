name: Release Pipeline

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Next Version Tag
        id: versioning
        run: |
          latest=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          major=$(echo $latest | awk -F. '{print $1}' | tr -d 'v')
          minor=$(echo $latest | awk -F. '{print $2}')
          patch=$(echo $latest | awk -F. '{print $3}')
          next_patch=$((patch + 1))
          next_version="v${major}.${minor}.${next_patch}"
          echo "next_version=$next_version" >> $GITHUB_ENV

      - name: Create Tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag -a ${{ env.next_version }} -m "Release version ${{ env.next_version }}"
          git push origin ${{ env.next_version }}

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Check if there are any tags
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            # Use commits since the last tag
            range=$(git describe --tags --abbrev=0)..HEAD
          else
            # Use all commits since the beginning
            range=HEAD
          fi

          # Generate release notes
          notes=$(git log $range --pretty=format:"- %s")

          # Save the notes to an environment variable
          echo "release_notes=$notes" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.next_version }}
          release_name: "Release ${{ env.next_version }}"
          body: ${{ env.release_notes }}
          draft: false
          prerelease: false
